/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "adsr.h"

void Adsr_do_type_init(Adsr_do_type& _ctx) {
   Util_edge_type_init(_ctx.inst_104a0);
   Util_smooth_type_init(_ctx.inst_295a0);
   _ctx.out = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.scale = 0.0f;
   _ctx.state = 0;
   _ctx.target = 0.0f;
}

void Adsr_process_type_init(Adsr_process_type& _ctx) {
   Adsr_do_type_init(_ctx.inst_1a025);
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob4 = 0.0f;
}

float Adsr_do(Adsr_do_type& _ctx, float gate, float a, float d, float s, float r) {
   float a_rate = (1.0f / ((100.0f * a) + 0.01f));
   float d_rate = (1.0f / ((100.0f * d) + 0.01f));
   float r_rate = (1.0f / ((100.0f * r) + 0.01f));
   _ctx.out = (_ctx.out + (((_ctx.target - _ctx.out) * _ctx.rate) * 0.004f));
   bool bgate = (gate > 0.0f);
   if (_ctx.state == 0) {
      if (Util_edge(_ctx.inst_104a0, bgate)) {
         _ctx.state = 1;
         _ctx.scale = (gate / 5.0f);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.0f;
   }
   if (_ctx.state == 1) {
      if (bgate == false) {
         _ctx.state = 0;
      }
      if ((_ctx.out > 1024.0f)) {
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = (1.2f * 1024.0f);
   }
   if (_ctx.state == 2) {
      if (bgate == false) {
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.0f);
   }
   return (Util_smooth(_ctx.inst_295a0, _ctx.scale) * float_clip((_ctx.out / 1024.0f), 0.0f, 1.0f));
}

void Adsr_controlChange(Adsr_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 1) {
      _ctx.knob1 = (int_to_float(value) / 127.0f);
   }
   if (control == 2) {
      _ctx.knob2 = (int_to_float(value) / 127.0f);
   }
   if (control == 3) {
      _ctx.knob3 = (int_to_float(value) / 127.0f);
   }
   if (control == 4) {
      _ctx.knob4 = (int_to_float(value) / 127.0f);
   }
}

