/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef LADDER_H
#define LADDER_H

#include "vultin.h"
#include "ladder.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   float pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   float x1;
   float y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   float x;
} Util_smooth_type;

typedef struct Util_average2_type {
   float x0;
} Util_average2_type;

typedef struct Ladder_heun_type {
   float p0;
   float p1;
   float p2;
   float p3;
} Ladder_heun_type;

typedef struct Ladder_euler_type {
   float p0;
   float p1;
   float p2;
   float p3;
} Ladder_euler_type;

typedef struct Ladder_process_euler_type {
   Ladder_euler_type e_6899;
   float fh;
   Util_change_type inst_1b099;
} Ladder_process_euler_type;

typedef struct Ladder_process_heun_type {
   float fh;
   Ladder_heun_type h_84a0;
   Util_change_type inst_1b0a0;
} Ladder_process_heun_type;

typedef struct Ladder_process_type {
   Ladder_process_heun_type inst_1a0c3;
} Ladder_process_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0.0f;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0.0f;
   _ctx.y1 = 0.0f;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0.0f;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0.0f;
}

static_inline void Ladder_heun_type_init(Ladder_heun_type& _ctx) {
   _ctx.p0 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p3 = 0.0f;
}

static_inline void Ladder_euler_type_init(Ladder_euler_type& _ctx) {
   _ctx.p0 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p3 = 0.0f;
}

static_inline void Ladder_process_euler_type_init(Ladder_process_euler_type& _ctx) {
   Ladder_euler_type_init(_ctx.e_6899);
   _ctx.fh = 0.0f;
   Util_change_type_init(_ctx.inst_1b099);
}

static_inline void Ladder_process_heun_type_init(Ladder_process_heun_type& _ctx) {
   _ctx.fh = 0.0f;
   Ladder_heun_type_init(_ctx.h_84a0);
   Util_change_type_init(_ctx.inst_1b0a0);
}

static_inline void Ladder_process_type_init(Ladder_process_type& _ctx) {
   Ladder_process_heun_type_init(_ctx.inst_1a0c3);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = (x && (_ctx.pre == false));
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, float x) {
   bool v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Util_map(float x, float x0, float x1, float y0, float y1) {
   return ((((x - x0) * (y1 - y0)) / (x1 - x0)) + y0);
}

static_inline float Util_dcblock(Util_dcblock_type& _ctx, float x0) {
   float y0 = ((x0 - _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline float Util_smooth(Util_smooth_type& _ctx, float input) {
   _ctx.x = (_ctx.x + ((input - _ctx.x) * 0.005f));
   return _ctx.x;
}

static_inline float Util_average2(Util_average2_type& _ctx, float x1) {
   float result = ((_ctx.x0 + x1) / 2.0f);
   _ctx.x0 = x1;
   return result;
}

static_inline float Util_cubic_clipper(float x) {
   if ((x <= ((-2.0f) / 3.0f))) {
      return ((-2.0f) / 3.0f);
   }
   else {
      if ((x >= (2.0f / 3.0f))) {
         return (2.0f / 3.0f);
      }
      else {
         return (x - (((x * x) * x) / 3.0f));
      }
   }
}

static_inline float Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[index];
}

static_inline float Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[index];
}

static_inline float Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[index];
}

static_inline float Util_pitchToRate_1024(float pitch) {
   int32_t index = int_clip(float_to_int((pitch * 0.244094488189f)), 0, 31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

static_inline float Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[index];
}

static_inline float Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[index];
}

static_inline float Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[index];
}

static_inline float Util_pitchToRate(float pitch) {
   int32_t index = int_clip(float_to_int((pitch * 0.244094488189f)), 0, 31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

static_inline float Util_cvToPitch(float cv) {
   return ((cv * 120.0f) + 24.0f);
}

static_inline float Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[index];
}

static_inline float Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[index];
}

static_inline float Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[index];
}

static_inline float Util_cvToRate_1024(float cv) {
   int32_t index = int_clip(float_to_int((cv * 34.4444444444f)), 0, 31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

static_inline float Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[index];
}

static_inline float Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[index];
}

static_inline float Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[index];
}

static_inline float Util_cvToRate(float cv) {
   int32_t index = int_clip(float_to_int((cv * 141.111111111f)), 0, 127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

static_inline float Util_pitchToCv(float pitch) {
   return ((1.0f / 120.0f) * ((-24.0f) + pitch));
}

static_inline float Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[index];
}

static_inline float Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[index];
}

static_inline float Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[index];
}

static_inline float Util_cvToperiod(float cv) {
   int32_t index = int_clip(float_to_int((cv * 31.0f)), 0, 31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

static_inline float Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[index];
}

static_inline float Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[index];
}

static_inline float Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[index];
}

static_inline float Util_cvTokHz(float cv) {
   int32_t index = int_clip(float_to_int((cv * 31.0f)), 0, 31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

static_inline float Ladder_tune_raw_c0(int32_t index) {
   return Ladder_tune_c0[index];
}

static_inline float Ladder_tune_raw_c1(int32_t index) {
   return Ladder_tune_c1[index];
}

static_inline float Ladder_tune_raw_c2(int32_t index) {
   return Ladder_tune_c2[index];
}

static_inline float Ladder_tune(float cut) {
   int32_t index = int_clip(float_to_int((cut * 127.0f)), 0, 127);
   return (float_wrap_array(Ladder_tune_c0)[index] + (cut * (float_wrap_array(Ladder_tune_c1)[index] + (float_wrap_array(Ladder_tune_c2)[index] * cut))));
}

static_inline float Ladder_heun(Ladder_heun_type& _ctx, float input, float fh, float res) {
   float wt0 = Util_cubic_clipper((input - ((4.0f * res) * _ctx.p3)));
   float wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0 = ((wt0 - wt1) * fh);
   float wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1 = ((wt1 - wt3) * fh);
   float wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2 = ((wt3 - wt5) * fh);
   float wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3 = ((wt5 - wt7) * fh);
   float pt0 = (_ctx.p0 + dpt0);
   float pt1 = (_ctx.p1 + dpt1);
   float pt2 = (_ctx.p2 + dpt2);
   float pt3 = (_ctx.p3 + dpt3);
   float w0 = Util_cubic_clipper((input - ((4.0f * res) * pt3)));
   float w1 = Util_cubic_clipper(pt0);
   float dp0 = ((w0 - w1) * fh);
   float w3 = Util_cubic_clipper(pt1);
   float dp1 = ((w1 - w3) * fh);
   float w5 = Util_cubic_clipper(pt2);
   float dp2 = ((w3 - w5) * fh);
   float w7 = Util_cubic_clipper(pt3);
   float dp3 = ((w5 - w7) * fh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) / 2.0f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) / 2.0f));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) / 2.0f));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) / 2.0f));
   return _ctx.p3;
}

static_inline float Ladder_euler(Ladder_euler_type& _ctx, float input, float fh, float res) {
   float w0 = Util_cubic_clipper((input - ((4.0f * res) * _ctx.p3)));
   float w1 = Util_cubic_clipper(_ctx.p0);
   float dpt0 = ((w0 - w1) * fh);
   float w3 = Util_cubic_clipper(_ctx.p1);
   float dpt1 = ((w1 - w3) * fh);
   float w5 = Util_cubic_clipper(_ctx.p2);
   float dpt2 = ((w3 - w5) * fh);
   float w7 = Util_cubic_clipper(_ctx.p3);
   float dpt3 = ((w5 - w7) * fh);
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

float Ladder_process_euler(Ladder_process_euler_type& _ctx, float input, float cut, float res);

float Ladder_process_heun(Ladder_process_heun_type& _ctx, float input, float cut, float res);

static_inline float Ladder_process(Ladder_process_type& _ctx, float input, float cut, float res) {
   return Ladder_process_heun(_ctx.inst_1a0c3, input, cut, res);
}

static_inline void Ladder_noteOn(Ladder_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Ladder_noteOff(Ladder_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Ladder_controlChange(Ladder_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Ladder_default(Ladder_process_type& _ctx) {
}


#endif // LADDER_H
